// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using People.Infrastructure.DataAccess;
using People.Infrastructure.DataAccess;

#nullable disable

namespace People.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220315171809_OneParentToManyChildPositions")]
    partial class OneParentToManyChildPositions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppIdentityRoleUserAttribute", b =>
                {
                    b.Property<int>("AllowEditRolesId")
                        .HasColumnType("integer");

                    b.Property<int>("EditableAttributesId")
                        .HasColumnType("integer");

                    b.HasKey("AllowEditRolesId", "EditableAttributesId");

                    b.HasIndex("EditableAttributesId");

                    b.ToTable("EditableRoleAttributes", (string)null);
                });

            modelBuilder.Entity("AppIdentityRoleUserAttribute1", b =>
                {
                    b.Property<int>("AllowViewRolesId")
                        .HasColumnType("integer");

                    b.Property<int>("ViewableAttributesId")
                        .HasColumnType("integer");

                    b.HasKey("AllowViewRolesId", "ViewableAttributesId");

                    b.HasIndex("ViewableAttributesId");

                    b.ToTable("ViewableRoleAttributes", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PositionUser", b =>
                {
                    b.Property<int>("PositionsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("PositionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PositionUser");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FeedbackId")
                        .HasColumnType("integer");

                    b.Property<bool>("NoAnswer")
                        .HasColumnType("boolean");

                    b.Property<int?>("OptionId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.PerformanceReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date");

                    b.Property<int?>("FinalReplyId")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReviewedUserReplyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FinalReplyId")
                        .IsUnique();

                    b.HasIndex("ReviewedUserId");

                    b.HasIndex("ReviewedUserReplyId")
                        .IsUnique();

                    b.ToTable("PerformanceReviews");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerType")
                        .HasColumnType("integer");

                    b.Property<int?>("FeedbackReviewId")
                        .HasColumnType("integer");

                    b.Property<int?>("FeedbackTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Options")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("UserReviewId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserReviewTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackReviewId");

                    b.HasIndex("FeedbackTemplateId");

                    b.HasIndex("UserReviewId");

                    b.HasIndex("UserReviewTemplateId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("OptOut")
                        .HasColumnType("boolean");

                    b.Property<int?>("PerformanceReviewId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.ReviewReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("LastTriggeredDay")
                        .HasColumnType("date");

                    b.Property<int>("MonthCount")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewReminders");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.ReviewTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("RelatedPositionId")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RelatedPositionId");

                    b.HasIndex("ReviewTypeId");

                    b.ToTable("ReviewTemplates");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.ReviewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReviewTypes");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.AppIdentityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("CrmRoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("InheritedRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("InheritedRoleId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("People.Domain.Users.Entities.AttributeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeOption");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("UserId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CrmId")
                        .HasColumnType("integer");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Compensation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Compensations");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("ParentPositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentPositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastTokenResetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("PerformanceReviewId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PerformanceReviewId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("People.Domain.Users.Entities.UserAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowEditSelf")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowViewSelf")
                        .HasColumnType("boolean");

                    b.Property<int>("AttributeType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.UserPositionHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChildUserId");

                    b.HasIndex("ParentUserId");

                    b.ToTable("UserPositionHierarchies");
                });

            modelBuilder.Entity("AppIdentityRoleUserAttribute", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("AllowEditRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("People.Domain.Users.Entities.UserAttribute", null)
                        .WithMany()
                        .HasForeignKey("EditableAttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppIdentityRoleUserAttribute1", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("AllowViewRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("People.Domain.Users.Entities.UserAttribute", null)
                        .WithMany()
                        .HasForeignKey("ViewableAttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("People.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PositionUser", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("People.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.Answer", b =>
                {
                    b.HasOne("People.Domain.Reviews.Entities.Reply", "Feedback")
                        .WithMany("Answers")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("People.Domain.Reviews.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.PerformanceReview", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("People.Domain.Reviews.Entities.Reply", "FinalReply")
                        .WithOne()
                        .HasForeignKey("People.Domain.Reviews.Entities.PerformanceReview", "FinalReplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("People.Domain.Users.Entities.User", "ReviewedUser")
                        .WithMany()
                        .HasForeignKey("ReviewedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("People.Domain.Reviews.Entities.Reply", "ReviewedUserReply")
                        .WithOne()
                        .HasForeignKey("People.Domain.Reviews.Entities.PerformanceReview", "ReviewedUserReplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("FinalReply");

                    b.Navigation("ReviewedUser");

                    b.Navigation("ReviewedUserReply");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.Question", b =>
                {
                    b.HasOne("People.Domain.Reviews.Entities.PerformanceReview", "FeedbackReview")
                        .WithMany("FeedbackQuestions")
                        .HasForeignKey("FeedbackReviewId");

                    b.HasOne("People.Domain.Reviews.Entities.ReviewTemplate", "FeedbackTemplate")
                        .WithMany("FeedbackQuestions")
                        .HasForeignKey("FeedbackTemplateId");

                    b.HasOne("People.Domain.Reviews.Entities.PerformanceReview", "UserReview")
                        .WithMany("ReviewedUserQuestions")
                        .HasForeignKey("UserReviewId");

                    b.HasOne("People.Domain.Reviews.Entities.ReviewTemplate", "UserReviewTemplate")
                        .WithMany("ReviewedUserQuestions")
                        .HasForeignKey("UserReviewTemplateId");

                    b.Navigation("FeedbackReview");

                    b.Navigation("FeedbackTemplate");

                    b.Navigation("UserReview");

                    b.Navigation("UserReviewTemplate");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.Reply", b =>
                {
                    b.HasOne("People.Domain.Reviews.Entities.PerformanceReview", null)
                        .WithMany("Feedback")
                        .HasForeignKey("PerformanceReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("People.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.ReviewReminder", b =>
                {
                    b.HasOne("People.Domain.Reviews.Entities.PerformanceReview", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.ReviewTemplate", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.Position", "RelatedPosition")
                        .WithMany()
                        .HasForeignKey("RelatedPositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("People.Domain.Reviews.Entities.ReviewType", "ReviewType")
                        .WithMany()
                        .HasForeignKey("ReviewTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RelatedPosition");

                    b.Navigation("ReviewType");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.AppIdentityRole", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.AppIdentityRole", "InheritedRole")
                        .WithMany()
                        .HasForeignKey("InheritedRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InheritedRole");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.AttributeOption", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.UserAttribute", "Attribute")
                        .WithMany("AttributeOptions")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.AttributeValue", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.UserAttribute", "Attribute")
                        .WithMany("Values")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("People.Domain.Users.Entities.User", "User")
                        .WithMany("Attributes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("User");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Branch", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.User", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Director");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Compensation", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("People.Domain.Users.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("People.Domain.Users.Entities.User", "User")
                        .WithMany("Compensations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Notification", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Position", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.Position", "ParentPosition")
                        .WithMany("ChildPositions")
                        .HasForeignKey("ParentPositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentPosition");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.User", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("People.Domain.Reviews.Entities.PerformanceReview", null)
                        .WithMany("FeedbackUsers")
                        .HasForeignKey("PerformanceReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.UserPositionHierarchy", b =>
                {
                    b.HasOne("People.Domain.Users.Entities.User", "ChildUser")
                        .WithMany()
                        .HasForeignKey("ChildUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("People.Domain.Users.Entities.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildUser");

                    b.Navigation("ParentUser");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.PerformanceReview", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("FeedbackQuestions");

                    b.Navigation("FeedbackUsers");

                    b.Navigation("ReviewedUserQuestions");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.Reply", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("People.Domain.Reviews.Entities.ReviewTemplate", b =>
                {
                    b.Navigation("FeedbackQuestions");

                    b.Navigation("ReviewedUserQuestions");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.Position", b =>
                {
                    b.Navigation("ChildPositions");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.User", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Compensations");
                });

            modelBuilder.Entity("People.Domain.Users.Entities.UserAttribute", b =>
                {
                    b.Navigation("AttributeOptions");

                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
